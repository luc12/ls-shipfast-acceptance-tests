buildscript {
  ext {
    junitVersion = '4.11'
    assertjVersion = '3.3.0'
  }

  repositories {
    mavenLocal()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath 'se.transmode.gradle:gradle-docker:1.2'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'docker'

sourceCompatibility = 1.8
targetCompatibility = 1.8

<<<<<<< HEAD
=======
group = 'ls-shipfast'

jar {
  version = '0.0.1'
}

distDocker {
  exposePort 8080
}

docker {
  baseImage = 'anapsix/alpine-java:8'
}

bootRepackage  {
  classifier = 'exec'
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/intTest/java')
    }
    resources.srcDir file('src/intTest/resources')
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

>>>>>>> 72b8e053ce885855d63e5b986404550726111387
dependencies {
  testCompile "junit:junit:$junitVersion"
  testCompile "org.assertj:assertj-core:$assertjVersion"
<<<<<<< HEAD
  testCompile "info.cukes:cucumber-java:$cucumberVersion"
  testCompile "info.cukes:cucumber-junit:$cucumberVersion"
=======
  testCompile "org.springframework.boot:spring-boot-starter-test"
}

tasks.withType(JavaCompile) {
  options.incremental = true
}
>>>>>>> 72b8e053ce885855d63e5b986404550726111387

  compile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
  compile "org.seleniumhq.selenium:selenium-htmlunit-driver:$htmlunitVersion"
}

<<<<<<< HEAD
task cucumber() {
  dependsOn assemble, compileTestJava
  doLast {
    javaexec {
      main = "cucumber.api.cli.Main"
      classpath = configurations.testRuntime + sourceSets.main.output + sourceSets.test.output
      args = ['--plugin', 'pretty', '--glue', 'com.shipfast.test', 'src/test/resources']
    }
  }
}

task startServices(type: Exec, group: 'docker') {
  // Define services
  commandLine 'echo', 'TBD'
}

task stopServices(group: 'docker') << {
  // Clean-up services
}

cucumber.dependsOn startServices
cucumber.finalizedBy stopServices
=======
task integrationTest(type: Test) {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false }
}

task startIntegrationServices(type: Exec, group: 'docker') {
  // Define integration services
  commandLine 'docker', 'run', '-p', '27017', '--name', 'db', '-d', 'mongo'
}
task stopIntegrationServices(group: 'docker') << {
  // Clean-up integration services
  exec { commandLine 'docker', 'stop', 'db' }
  exec {
    ignoreExitValue true
    commandLine 'docker', 'rm', 'db'
  }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test
integrationTest.dependsOn startIntegrationServices
integrationTest.finalizedBy stopIntegrationServices
>>>>>>> 72b8e053ce885855d63e5b986404550726111387

task createWrapper(type: Wrapper) {
  gradleVersion = '2.9'
}
